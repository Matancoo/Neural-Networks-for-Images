# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZA3G6P8LvpaDByKuhoYee-sqvlxY0DHU
"""

import torch
import torchvision
import torchvision.transforms as transforms

transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])

batch_size = 32

trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                        download=True, transform=transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,
                                          shuffle=True, num_workers=2)

testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                       download=True, transform=transform)
testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,
                                         shuffle=False, num_workers=2)

classes = ('plane', 'car', 'bird', 'cat',
           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')

import torch.nn as nn
import torch.nn.functional as F

#BASELINE MODEL (see pdf for more)

class Net(nn.Module):
    def __init__(self):
        super().__init__()
        self.conv1 = nn.Conv2d(3, 6, 5)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(6, 16, 5)
        self.fc1 = nn.Linear(16* 5 * 5,120) 
        self.fc2 = nn.Linear(120,10) 
  



    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))

        x = torch.flatten(x, 1) 
       

        x = F.relu(self.fc1(x))


        x = self.fc2(x)
        return x 

net = Net()

import torch.optim as optim

criterion = nn.CrossEntropyLoss() 
optimizer = optim.Adam(net.parameters(),lr=0.0001)

EPOCH = 100
train_losses =[]
test_losses =[]


for epoch in range(EPOCH):  # loop over the dataset multiple times

#training

    running_loss = 0.0
    for data in trainloader:
        inputs, labels = data

        # zero the parameter gradients
        optimizer.zero_grad()

        # forward + backward + optimize
        outputs = net(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

    #Train loss
        running_loss += loss.item()
    epoch_loss = running_loss/len(trainloader)
    train_losses.append(epoch_loss)
    print(epoch)



#testing

    running_loss = 0.0
    with torch.no_grad():
      for data in testloader:
        images, labels = data 

        outputs = net(images)
        loss = criterion(outputs,labels)
        running_loss += loss.item()

    #Test loss
    epoch_loss = running_loss/len(testloader)
    test_losses.append(epoch_loss)




#plotting training and testing losses
 
x = np.linspace(1,EPOCH,EPOCH).astype(int)
y_train = np.array(train_losses)
y_test = np.array(test_losses)

plt.plot(x,y_train, 'r')
plt.plot(x,y_test,'b')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.show()


print('Finished Training')